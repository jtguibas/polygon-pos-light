
pub type EthAddress = [u8; 20];

#[cfg(test)]
mod test {
    use alloy_rlp::Decodable;
    use reth_primitives::revm_primitives::bitvec::macros::internal::funty::Fundamental;

    #[test]
    fn test_decode() {
        let header_bytes = hex::decode("f9025ba07fd311189e40a776db15f4b6bc0e4fceed937614eea20dca968b73b4444613c3a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0d779a24664fd354017a7469607dee3faa87ef4978112d1c8e958b2a5ec7d52f4a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bb52858401c9c380808465da406eb861d88301010083626f7289676f312e32302e3132856c696e757800000000000000aa28c83c8be63349a69ca5d761963a1cec82d0cae01eac9c5c7de3ac68517bb30e2628da2c0e5e97d2749e91d03b24759bcaf1dc5e286e7a658206676d32a4d001a000000000000000000000000000000000000000000000000000000000000000008800000000000000000f").unwrap_or_default();
        let h = reth_primitives::Header::decode(&mut header_bytes.as_slice()).unwrap();
        assert_eq!(h.number.as_u64(), 3887749);
        println!("{}", h.hash_slow().to_string())
    }
}